[{"C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\index.js":"1","C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\App.js":"2","C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\components\\View.js":"3","C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\components\\Formate.js":"4","C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\components\\Input.js":"5","C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\components\\Login.js":"6","C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\components\\Register.js":"7"},{"size":168,"mtime":1611908874522,"results":"8","hashOfConfig":"9"},{"size":670,"mtime":1612352695446,"results":"10","hashOfConfig":"9"},{"size":2267,"mtime":1612352696576,"results":"11","hashOfConfig":"9"},{"size":3647,"mtime":1612352697291,"results":"12","hashOfConfig":"9"},{"size":879,"mtime":1611908873252,"results":"13","hashOfConfig":"9"},{"size":2668,"mtime":1612352854846,"results":"14","hashOfConfig":"9"},{"size":4604,"mtime":1612352852982,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"9uns8k",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"18"},"C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\index.js",[],["36","37"],"C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\App.js",[],"C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\components\\View.js",["38","39","40"],"import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst Exercise = (props) => (\r\n    <tr>\r\n        <td>{props.view.name}</td>\r\n        <td>{props.view.title}</td>\r\n        <td>{props.view.summary}</td>\r\n        <td>\r\n            <a href=\"#\" onClick={() => { props.deleteExercise(props.view._id) }}>delete</a>\r\n        </td>\r\n    </tr>\r\n)\r\n\r\nclass View extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.deleteExercise = this.deleteExercise.bind(this)\r\n\r\n        this.state = {\r\n            views: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://express-server-demo1o1.herokuapp.com/view')\r\n            .then(response => {\r\n                this.setState({ views: response.data })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    deleteExercise(id) {\r\n        axios.delete('https://express-server-demo1o1.herokuapp.com/delete/'+id)\r\n          .then(response => { console.log(response.data)});\r\n    \r\n        this.setState({\r\n          views: this.state.views.filter(el => el._id !== id)\r\n        })\r\n      }\r\n\r\n    exerciseList() {\r\n        return this.state.views.map(currentexercise => {\r\n            return <Exercise view={currentexercise} deleteExercise={this.deleteExercise} key={currentexercise._id} />;\r\n        })\r\n    }\r\n\r\n    viewHandeler = () => {\r\n        window.location = '/submit'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>All Summary</h3>\r\n                <button className=\"button button2\" onClick={this.viewHandeler}>Add your Summary</button>\r\n                <table className=\"table\">\r\n                    <thead className=\"thead-light\">\r\n                        <tr>\r\n                            <th>UserName</th>\r\n                            <th>Title</th>\r\n                            <th>Summary</th>\r\n                            <th>Remove</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.exerciseList()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default View;","C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\components\\Formate.js",["41","42"],"import React, { Component } from 'react';\r\nimport Info from './Input';\r\nimport { InputGroup } from 'react-bootstrap';\r\nimport { FormControl } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from 'axios';\r\nimport '../components_style/formate.css'\r\n\r\nclass Formate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.changenameValueHandeler = this.changenameValueHandeler.bind(this);\r\n        this.changetitleValueHandeler = this.changetitleValueHandeler.bind(this);\r\n        this.changesummaryValueHandeler = this.changesummaryValueHandeler.bind(this)\r\n\r\n        this.userAddHandeler = this.userAddHandeler.bind(this);\r\n\r\n        this.state = {\r\n            name: '',\r\n            title: '',\r\n            summary: ''\r\n        }\r\n    }\r\n    changenameValueHandeler = (event) => {\r\n        this.setState({\r\n            name: event.target.value,\r\n        })\r\n    }\r\n\r\n    changetitleValueHandeler = (event) => {\r\n        this.setState({\r\n            title: event.target.value,\r\n        })\r\n    }\r\n\r\n    changesummaryValueHandeler = (event) => {\r\n        this.setState({\r\n            summary: event.target.value,\r\n        })\r\n    }\r\n\r\n    userAddHandeler(e) {\r\n        e.preventDefault();\r\n\r\n        const user = {\r\n            name: this.state.name,\r\n            title: this.state.title,\r\n            summary: this.state.summary\r\n        }\r\n        axios.post('https://express-server-demo1o1.herokuapp.com/submit', user)\r\n            .then(res => console.log(res.data))\r\n\r\n        this.setState({\r\n            name: '',\r\n            title: '',\r\n            summary: ''\r\n        })\r\n\r\n        if (user === null) {\r\n            window.location = '/view';\r\n        }\r\n    }\r\n\r\n    viewHandeler = () => {\r\n        window.location = '/view'\r\n    }\r\n\r\n    render() {\r\n        const name = <Info name={this.state.name}\r\n            outputvalue={this.chnagenameValueHandeler}\r\n            value={this.state.name}></Info>\r\n        return (\r\n            <div className=\"formate\">\r\n                <div className=\"main\">\r\n                    <h1 className=\"font\">Add your summary</h1>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\" type=\"text\" value={this.state.name} onChange={this.changenameValueHandeler} >\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"inputGroup-sizing-sm\">Name</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\r\n                    </InputGroup>\r\n                    <InputGroup size=\"sm\" className=\"mb-3\" type=\"text\" value={this.state.title} onChange={this.changetitleValueHandeler}>\r\n                        <InputGroup.Prepend>\r\n                            <InputGroup.Text id=\"inputGroup-sizing-sm\">Title</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\r\n                    </InputGroup>\r\n                    <form >\r\n                        <textarea className=\"summary1\" type=\"text\" value={this.state.summary} onChange={this.changesummaryValueHandeler} placeholder=\"Type your summary here...\">\r\n                        </textarea>\r\n                    </form>\r\n                    <button className=\"button button2\" onClick={this.userAddHandeler}>Submit</button><br></br>\r\n                    <button className=\"button button2\" onClick={this.viewHandeler}>View</button>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Formate;","C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\components\\Input.js",[],["43","44"],"C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\components\\Login.js",["45","46"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user_name: '',\r\n      password: '',\r\n      error: false,\r\n      loginSuccess: false,\r\n    };\r\n  }\r\n\r\n  handleOnChangeUserName = (e) => {\r\n    this.setState({\r\n      user_name: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleOnChangePassword = (e) => {\r\n    this.setState({\r\n      password: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = async (e) => {\r\n    const data = {\r\n      user_name: this.state.user_name,\r\n      password: this.state.password,\r\n    };\r\n\r\n    const LoginService = data => (\r\n        axios.post('https://express-server-demo1o1.herokuapp.com/login', data)\r\n            .then(res => res.status)\r\n    )    \r\n\r\n    const loginResult = await LoginService(data);\r\n    if (loginResult !== 200) {\r\n      this.setState({\r\n        error: true,\r\n        loginSuccess: false,\r\n      });\r\n    } else\r\n      this.setState({\r\n        loginSuccess: true,\r\n        error: false,\r\n      });\r\n      window.location = '/view';\r\n  };\r\n\r\n  render() {\r\n    const { loginSuccess, error } = this.state;\r\n\r\n    return (\r\n      <div className=\"Login\">\r\n        <h1> Login </h1> {' '}\r\n        <form onSubmit={this.onSubmit}>\r\n          <div>\r\n            <div className=\"fields\">\r\n              <p> Username </p>    {' '}\r\n              <input\r\n                type=\"text\"\r\n                name=\"Username\"\r\n                onChange={this.handleOnChangeUserName}\r\n                autoComplete=\"Username\"\r\n                required\r\n              />\r\n            </div>{' '}\r\n            {' '}\r\n            <div className=\"fields\">\r\n              {' '}\r\n              <p> Password </p>    {' '}\r\n              <input\r\n                type=\"password\"\r\n                name=\"Password\"\r\n                onChange={this.handleOnChangePassword}\r\n                autoComplete=\"Password\"\r\n                required\r\n              />{' '}\r\n                  {' '}\r\n            </div>{' '}\r\n            {' '}\r\n            <div className=\"buttons\">\r\n              {' '}\r\n              <button\r\n                type=\"button\"\r\n                onClick={this.onSubmit}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                {' '}\r\n                Login    {' '}\r\n              </button>{' '}\r\n                  <Link to=\"/register\">\r\n                  Register </Link>  {' '}\r\n               {' '}\r\n            </div>{' '}\r\n               {' '}\r\n          </div>{' '}\r\n           {' '}\r\n        </form>{' '}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\JEM's\\Desktop\\Tahal sir\\express\\Client\\src\\components\\Register.js",["47","48"],"import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport bcrypt from 'bcryptjs';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default class Registration extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      first_name: '',\r\n      last_name: '',\r\n      user_name: '',\r\n      password: '',\r\n      register: false,\r\n      error: false,\r\n    };\r\n  }\r\n\r\n  handleOnChangeFirstName = e => {\r\n    this.setState({\r\n      first_name: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleOnChangeLastName = e => {\r\n    this.setState({\r\n      last_name: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleOnChangeUserName = e => {\r\n    this.setState({\r\n      user_name: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleOnChangePassword = e => {\r\n    this.setState({\r\n      password: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleOnBlur = async e => {\r\n    this.setState({\r\n      user_name: e.target.value,\r\n    });\r\n    const data = {\r\n      user_name: this.state.user_name,\r\n    };\r\n\r\n    const UsernameValidation = data => (\r\n      axios.post('https://express-server-demo1o1.herokuapp.com/validateUsername', data)\r\n        .then(exist => exist.status)\r\n    )\r\n\r\n    const isUsernameTaken = await UsernameValidation(data);\r\n\r\n    isUsernameTaken === 204\r\n      ? this.setState({ user_name_taken: true })\r\n      : this.setState({ user_name_taken: false });\r\n  };\r\n\r\n  onSubmit = async e => {\r\n    e.preventDefault();\r\n    const data = {\r\n      first_name: this.state.first_name,\r\n      last_name: this.state.last_name,\r\n      user_name: this.state.user_name,\r\n      password: this.state.password,\r\n    };\r\n\r\n    const UserRegistration = data => {\r\n      const password = data.password;\r\n      const salt = bcrypt.genSaltSync(10);\r\n      const hash = bcrypt.hashSync(password, salt);\r\n\r\n      data[\"password\"] = hash;\r\n\r\n      return axios.post('https://express-server-demo1o1.herokuapp.com/Register', data)\r\n        .then(res => res.status);\r\n    };\r\n\r\n    const registerStatus = await UserRegistration(data);\r\n    if (registerStatus === 200) {\r\n      this.setState({\r\n        first_name: '',\r\n        last_name: '',\r\n        user_name: '',\r\n        password: '',\r\n        register: true,\r\n        error: false,\r\n      })\r\n      window.location = '/view';;\r\n    } else\r\n      this.setState({\r\n        error: true,\r\n        register: false,\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { register, error, user_name_taken } = this.state;\r\n\r\n    return (\r\n      <div className=\"Registration\">\r\n        <h1> Sign Up </h1> <form\r\n          onSubmit={this.onSubmit}\r\n        >\r\n          <div>\r\n            <div className=\"fields\">\r\n              <p> First Name </p>\r\n              {' '}\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.first_name}\r\n                name=\"FirstName\"\r\n                onChange={this.handleOnChangeFirstName}\r\n              />\r\n              {' '}\r\n            </div> <div className=\"fields\">\r\n              <p> Last Name </p>\r\n              {' '}\r\n              <input\r\n                type=\"text\"\r\n                value={this.state.last_name}\r\n                name=\"LastName\"\r\n                onChange={this.handleOnChangeLastName}\r\n              />\r\n              {' '}\r\n            </div> <div className=\"fields\">\r\n              <p> Username </p>\r\n              {' '}\r\n              <input\r\n                type=\"text\"\r\n                className={classNames({ error: user_name_taken })}\r\n                value={this.state.user_name}\r\n                name=\"Username\"\r\n                onBlur={this.handleOnBlur}\r\n                onChange={this.handleOnChangeUserName}\r\n                autoComplete=\"Username\"\r\n                required\r\n              />\r\n            </div> <div className=\"fields\">\r\n              <p> Password </p>\r\n              {' '}\r\n              <input\r\n                type=\"password\"\r\n                value={this.state.password}\r\n                name=\"Password\"\r\n                onChange={this.handleOnChangePassword}\r\n                autoComplete=\"password\"\r\n                required\r\n              />\r\n            </div> <div className=\"buttons\">\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary\"\r\n                disabled={user_name_taken}\r\n              >\r\n                {' '}Register{' '}\r\n              </button>\r\n              {' '}\r\n              <Link to=\"/login\"> Cancel </Link>\r\n              {' '}\r\n            </div>{' '}\r\n          </div>{' '}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":26},{"ruleId":"53","severity":1,"message":"57","line":2,"column":10,"nodeType":"55","messageId":"56","endLine":2,"endColumn":14},{"ruleId":"58","severity":1,"message":"59","line":11,"column":13,"nodeType":"60","endLine":11,"endColumn":82},{"ruleId":"53","severity":1,"message":"54","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":26},{"ruleId":"53","severity":1,"message":"61","line":70,"column":15,"nodeType":"55","messageId":"56","endLine":70,"endColumn":19},{"ruleId":"49","replacedBy":"62"},{"ruleId":"51","replacedBy":"63"},{"ruleId":"53","severity":1,"message":"64","line":56,"column":13,"nodeType":"55","messageId":"56","endLine":56,"endColumn":25},{"ruleId":"53","severity":1,"message":"65","line":56,"column":27,"nodeType":"55","messageId":"56","endLine":56,"endColumn":32},{"ruleId":"53","severity":1,"message":"66","line":104,"column":13,"nodeType":"55","messageId":"56","endLine":104,"endColumn":21},{"ruleId":"53","severity":1,"message":"65","line":104,"column":23,"nodeType":"55","messageId":"56","endLine":104,"endColumn":28},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'name' is assigned a value but never used.",["67"],["68"],"'loginSuccess' is assigned a value but never used.","'error' is assigned a value but never used.","'register' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]